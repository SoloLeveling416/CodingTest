########## 약수의 합 ##########
def solution(n):
    answer = 0
    for i in range(1, n+1): # 1부터 n까지의 약수를 구하는 반복문
        if n % i == 0: # n에서 i를 나눈 나머지가 0이라면
            answer += i # 약수를 모두 더하기
        
    return answer

########## 자릿수 더하기 ##########
def solution(n):
    # 1.
    answer = 0
    for i in str(n): # int를 str로 바꾼 후 각 글자 출력
        answer += int(i)

    # 2. 
    answer = sum(map(int, str(n)))  # str(n)으로 숫자를 쪼개 str > map으로 형식 변화 > sum

    return answer

########## 자연수 뒤집어 배열로 만들기 ########## ------------------------------------------- 다시 풀기
def solution(n):
    reverse_n = str(n)[::-1] # [::-1] -> reverse 처리
    
    answer = []
    for i in list(reverse_n):
        answer.append(int(i))
        
    return answer

########## 짝수와 홀수 ##########
def solution(num):
    if num % 2 == 1:
        return 'Odd'
    else:
        return 'Even'

########## 평균 구하기 ##########
def solution(arr):
    
    divide_num = len(arr) # 평균을 구하기 위해 필요한 수
    sum = 0 # 합
    for i in arr:
        sum += i
    
    answer = sum / divide_num
    return answer

########## x만큼 간격이 있는 n개의 숫자 ##########
def solution(x, n):
    answer = []
    if x > 0:
        for i in range(x, x*n+1, x): # range(start, end, step)
            answer.append(i)
    elif x < 0:
        for i in range(x, x*n-1, x):
            answer.append(i)
    else: # x가 0일 떄
        for i in range(x, n):
            answer.append(x)
            
    return answer

########## 나머지가 1이 되는 수 찾기 ##########
def solution(n):
    left_zero_list = []
    for i in range(2, n): # n 자기자신과 1을 제외한 나머지 범위 
        if n % i == 1:
            left_zero_list.append(i)
    
    min_left_zero = min(left_zero_list)
    
    return min_left_zero

########## 문자열을 정수로 바꾸기 ##########
def solution(s):
    answer = int(s)

    return answer

########## 두 정수 사이의 합 ##########
def solution(a, b):
    sum = 0
    if a != b and a > b: # a와 b가 다르고 a가 b보다 클 떄
        for i in range(b, a+1, 1):
            sum += i
    elif a!= b and a < b: # a와 b가 다르고 b가 a보다 클 때
        for i in range(a, b+1, 1):
            sum += i
    else: # a와 b가 같을 때
        sum = a
    
    return sum

########## 문자열 내 p와 y의 개수 ##########
def solution(s):
    p_cnt = 0
    y_cnt = 0
    other_cnt = 0
    for i in s:
        if "p" in i or "P" in i: # p나 P가 있다면 p_cnt 1씩 증가
            p_cnt += 1
        elif "y" in i or "Y" in i: # y나 Y가 있다면 y_cnt 1씩 증가
            y_cnt += 1
    
    # 단어에 p, P, y, Y가 없을 때에도 cnt는 모두 0이니 True 반환
    if p_cnt == y_cnt:
        return True
    else:
        return False

########## 정수 내림차순으로 배치하기 ##########
def solution(n):
    new_n = sorted(str(n), reverse=True)
    new_n_joined = ''.join(new_n)
    new_n_joined_int = int(new_n_joined)
    
    return new_n_joined_int

########## 정수 제곱근 판별 ##########
def solution(n):
    for i in range(1, n+1): # n이 1일 경우를 대비해서 n+1
        remainder = n % i # 나머지
        quotient = n // i # 몫
        
        if remainder == 0 and i == quotient: # 나머지가 1이고 나눈 값이 몫과 같다면
            return (i+1) * (i+1)
    else:
        return -1

########## 하샤드 수 ##########
def solution(x):
    list_x = list(map(int, str(x)))
    sum = 0
    for i in list_x:
        sum += i
    
    if x % sum == 0:
        return True
    else:
        return False

########## 음양 더하기 ########## ------------------------------------------- 다시 풀기
def solution(absolutes, signs):
    answer = 0
    for i in range(len(absolutes)):
        if signs[i]: # if True
            answer += absolutes[i]
        else:
            answer -= absolutes[i]
            
    return answer

########## 없는 숫자 더하기 ##########
def solution(numbers):
    sum = 0
    for i in range(0, 10): # 0부터 9까지의 숫자에 대해 반복
        if i not in numbers: # 숫자가 하나씩 커지면서 numbers 리스트 안에 있는지 확인하고
            sum += i # 없으면 sum에 누적
    
    return sum

########## 나누어 떨어지는 숫자 배열 ##########
def solution(arr, divisor):
    zero_remainder = []
    for i in arr:
        if i % divisor == 0: # 나누어 떨어지는 숫자가 있다면 append
            zero_remainder.append(i)
    
    zero_remainder.sort() # 오름차순 정렬
    
    if zero_remainder == []: # divisor로 나누어 떨어지는 element가 없을 때
        return [-1]
    else: 
        return zero_remainder

########## 서울에서 김서방 찾기 ########## ------------------------------------------- 다시 풀기
def solution(seoul):
    position = 0
    for i in range(len(seoul)):
        if "Kim" in seoul[i]:
            position += i
    
    return f"김서방은 {str(position)}에 있다" # return f"{}"

########## 콜라츠 추측 ########## ------------------------------------------- 다시 풀기
def solution(num):
    cnt = 0
    while num != 1: # num이 1이 아니라면 계속 반복
        if num % 2 == 0: # 짝수라면
            num = num / 2
        else: # 홀수라면
            num = num * 3 + 1
        cnt += 1
    
        if cnt == 500:
            return -1
            break
    return cnt

########## 핸드폰 번호 가리기 ########## ------------------------------------------- 다시 풀기
def solution(phone_number):
    star_num = []
    for i in range(0, len(phone_number)-4):
        star_num.append('*')
    for j in range(len(phone_number)-4, len(phone_number)):
        star_num.append(phone_number[j])
    
    joined_num = ''.join(star_num)
    
    return joined_num

########## 가운데 글자 가져오기 ##########
def solution(s):
    list_s = list(s)
    len_list_s = len(list_s)
    
    if len_list_s % 2 == 1: # s의 길이가 홀수일 떄
        idx = len_list_s // 2
        answer = s[idx]
    else: # s의 길이가 짝수일 떄
        idx_1 = len_list_s // 2
        idx_2 = len_list_s // 2 - 1
        answer = str(s[idx_2]) + str(s[idx_1])
        
    return answer

########## 제일 작은 수 제거하기 ########## ------------------------------------------- 다시 풀기
def solution(arr):
    if len(arr) > 1:
        arr.remove(min(arr))
        return arr
    else:
        return [-1]

########## 내적 ##########
def solution(a, b):
    sum = 0
    for i in range(len(a)):
        sum += (a[i] * b[i])
    
    return sum

########## 수박수박수박수박수박수? ##########
def solution(n):
    ans = ''
    for i in range(0, n):
        if i % 2 == 0:
            ans += '수'
        else:
            ans += '박'
            
    answer = ''.join(ans)
    return answer

########## 약수의 개수와 덧셈 ##########
def solution(left, right):
    num_cnt_dict = {}
    for num in range(left, right+1): # 13~17
        cnt = 0
        for j in range(1, num+1): # 1~13 / 1~14 / ...
            if num % j == 0: # 약수라면
                cnt += 1 # 카운트 하나씩 증가
        num_cnt_dict[num] = cnt # 새로운 딕셔너리에 각 숫자의 약수 카운트 append
    
    answer = 0
    for k in num_cnt_dict:
        if num_cnt_dict[k] % 2 == 0: # 짝수라면
            answer += k
        else: # 홀수라면
            answer -= k
    
    return answer

########## 문자열 내림차순으로 배치하기 ##########
def solution(s):
    list_s = list(s)
    sort_list_s = sorted(list_s, reverse=True)
    
    answer = ''
    for i in sort_list_s:
        answer += i
    
    return answer

########## 부족한 금액 계산하기 ##########
def solution(price, money, count):
    sum = 0
    for i in range(price, price*count+1, price):
        sum += i
    answer = sum - money
    if answer > 0: # 금액이 부족하다면
        return answer
    else:
        return 0

########## 문자열 다루기 기본 ########## ------------------------------------------- 다시 풀기
def solution(s):
    if len(s) == 4 or len(s) == 6:
        if s.isdigit(): # 숫자로만 이루어졌는지 판별
            return True
        else:
            return False
    else:
        return False

########## 행렬의 덧셈 ########## ------------------------------------------- 다시 풀기
def solution(arr1, arr2):
    list_ans = []
    for idx, (i, j) in enumerate(zip(arr1, arr2)): # zip을 하지 않으면 arr1, arr2이 섞어서 나옴
        temp_list = []
        for k in range(len(i)):
            answer = i[k] + j[k]
            temp_list.append(answer)
        list_ans.append(temp_list)
        
    return list_ans

########## 직사각형 별찍기 ########## ------------------------------------------- 다시 풀기
a, b = map(int, input().strip().split(' '))

answer = ''
for i in range(0, b):
    for j in range(0, a):
        print('*', end='') # end='' print 동안 줄바꿈 방지
    print() # 줄바꿈

########## 같은 숫자는 싫어 ########## ------------------------------------------- 다시 풀기
def solution(arr):
    answer = [arr[0]] # 첫번째는 무조건 중복이 아니니 미리 넣어놓기
    for i in range(1, len(arr)):
        if arr[i] != arr[i-1]:
            answer.append(arr[i])
    return answer

########## 최대공약수와 최소공배수 ##########
1)
def solution(n, m):
    answer = []
    
    ### 최대공약수 ###
    # n과 m 각 약수들 구하기
    n_temp = []
    for i in range(1, n+1):
        if n % i == 0:
            n_temp.append(i)
    m_temp = []
    for j in range(1, m+1):
        if m % j == 0:
            m_temp.append(j)
    
    # 약수들 비교하기
    n_m_temp = []
    for nn in n_temp:
        for mm in m_temp:
            if nn == mm:
                n_m_temp.append(nn)
    divisor = max(n_m_temp) # 최대공약수
    
    ### 최대공배수 ###
    cnt = 1
    while True:
        if m % n == 0 and m > n: # 일단 나눌 때 나머지가 0이고 m > n이라면
            multiple = m
            break
        elif n % m == 0 and m < n: # 일단 나눌 때 나머지가 0이고 m < n이라면
            multiple = n
            break
        elif m % n != 0: # 0으로 나누어 떨어지지 않는다면
            cnt += 1
            new_m = m * cnt
            if new_m % n == 0:
                multiple = new_m
                break
        else:
            multiple = 1
            break
                
    return([divisor, multiple])

2)
def solution(n, m):
    divisor = 0
    multiple = 0
    
    # 최대공약수
    for i in range(min(n, m), 0, -1):
        if n % i == 0 and m % i == 0:
            divisor += i
            break
    
    # 최소공배수
    for j in range(max(n, m), n*m+1, 1):
        if j % n == 0 and j % m == 0:
            multiple += j
            break
    
    return([divisor, multiple])

########## 예산 ########## ------------------------------------------- 다시 풀기
def solution(d, budget):
    sort_d = sorted(d)

    cnt = 0
    for i in sort_d:
        budget -= i

        if budget > 0:
            cnt += 1
        elif budget == 0:
            cnt += 1
            break
        else:
            break
    return cnt

########## 3진법 뒤집기 ##########
def solution(n):
    three = ''
    while n > 0:
        three += str(n % 3)
        n //= 3
        
    sum = 0
    cnt = 1
    for i in range(len(three[::-1])):
        ans = int(three[::-1][i]) * cnt
        cnt *= 3
        sum += ans
    
    return sum

########## 크기가 작은 부분 문자열 ##########
def solution(t, p):
    
    list_num = []
    for i in range(0, len(t)-len(p)+1):
        temp = ''
        temp += t[i:i+len(p)] # p의 개수만큼 뽑기
        list_num.append(temp)
    
    cnt = 0
    for j in list_num:
        if p >= j:
            cnt += 1
            
    return cnt

########## 삼총사 ########## ------------------------------------------- 다시 풀기
def solution(number):
    answer = 0
    for i in range(len(number)):
        for j in range(i+1, len(number)):
            for k in range(j+1, len(number)):
                if (number[i] + number[j] + number[k] == 0):
                    answer += 1
                    
    return answer

########## 이상한 문자 만들기 ########## ------------------------------------------- 다시 풀기
1)
def solution(s):
    list_s = list(s)
    cnt_list = []
    
    cnt = -1
    for i in list_s: # 공백을 기준으로 인덱스 순서대로 부여
        if i != ' ':
            cnt += 1
        else:
            cnt = -1
        cnt_list.append(cnt)
    print(cnt_list)

    for j in range(len(cnt_list)):
        if cnt_list[j] % 2 == 0:
            list_s[j] = list_s[j].upper()
        else:
            list_s[j] = list_s[j].lower()
    
    answer = ''.join(list_s)
    
    return answer

2)
def solution(s):
    new_list = s.split()
    
    answer = ''
    for i in new_list:
        for j in range(len(i)):
            if j % 2 == 0:
                answer += i[j].upper()
            else:
                answer += i[j].lower()
        answer += ' ' # 뒤에 공백

    return answer[0:-1]

########## 최소직사각형 ##########
def solution(sizes):
    w = []
    h = []
    for num in zip(sizes):
        num[0].sort(reverse=True)
        for i in range(len(num)):
            w.append(num[i][0])
            h.append(num[i][1])
            
    w_max = max(w)
    h_max = max(h)
    
    return w_max * h_max

########## 시저 암호 ##########


########## 	가장 가까운 같은 글자 ##########
1)
def solution(s):
    sum = []
    sum.append('-1')
    
    word = ''
    word += s[0]
    for i in range(1, len(s)):
        # 중복된 단어가 없다면
        if s[i] not in word:
            word += s[i]
            sum.append('-1')
        
        # 중복되는 단어가 있다면
        else:
            idx = []
            for j in range(len(word)):
                if s[i] == word[j]:
                    idx.append(j)
            real_idx = max(idx)
            word += s[i]
            num = i-real_idx
            sum.append(str(num))
            
    answer = list(map(int, sum))
    return answer

2)
def solution(s):
    dict = {}
    answer = []
    for i in range(len(s)):
        # 중복이 안된다면
        if s[i] not in dict:
            dict[s[i]] = i
            answer.append(-1)
        # 중복이 된다면
        else:
            answer.append(i-dict[s[i]])
            dict[s[i]] = i
    
    return answer

########## K번째수 ##########
def solution(array, commands):
    answer = []
    for lists in commands:
        list_a = array[lists[0]-1 : lists[1]]
        list_b = sorted(list_a)
        
        answer.append(list_b[lists[2]-1])
        
    return answer

########## 두 개 뽑아서 더하기 ##########
def solution(numbers):
    sum_a = []
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            sum_a.append(numbers[i] + numbers[j])
    sum_b = []
    for k in sum_a:
        if k not in sum_b:
            sum_b.append(k)
    sum_c = sorted(sum_b)
            
    return sum_c

########## 숫자 문자열과 영단어 ########## ------------------------------------------- 다시 풀기
def solution(s):
    dict = {}
    english = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]
    for i in range(0, 10):
        dict[english[i]] = str(i)
    
    print(dict)
    for key in dict:
        s = s.replace(key, dict[key]) # s = s.replace(전, 후)
        w
    return int(s)

########## 문자열 내 마음대로 정렬하기 ##########
def solution(food):
    temp = ''
    for i in range(1, len(food)):
        if food[i] // 2 > 0:
            for j in range(food[i] // 2):
                temp += str(i)
    
    reverse_temp = temp[::-1]
    answer = temp + '0' + reverse_temp
    
    return answer

########## 명예의 전당 (1) ########## ------------------------------------------- 다시 풀기


########## 콜라 문제 ##########


########## [1차] 비밀지도 ##########


########## 카드 뭉치 ##########


########## 추억 점수 ##########


########## 폰켓몬 ##########


########## 2016년 ##########


########## 기사단원의 무기 ##########


########## 모의고사 ##########


########## 과일 장수 ##########


########## 덧칠하기 ##########


########## 소수 찾기 ##########


########## 소수 만들기 ##########


########## 옹알이 (2) ##########


########## 실패율 ##########


########## [PCCE 기출문제] 9번 / 지폐 접기 ##########


##########  ##########


##########  ##########


##########  ##########


##########  ##########


##########  ##########


##########  ##########


##########  ##########


##########  ##########
